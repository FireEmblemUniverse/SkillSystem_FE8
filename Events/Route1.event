#define ChapterID Route1Ch
#define GenericA UnitRoute1Wild
#define GenericB UnitRoute1Trainer
#define ClassA ClassRoute1WildA
#define ClassB ClassRoute1WildB
#define WildLvl 1 
#define TrainerL 1
EventPointerTable(ChapterID,ThisChapter)

ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
TurnEventPlayer(DisableTutFlag_A, TutMsg1, 0, 255) // 
TurnEventPlayer(DisableTutFlag_B, TutMsg2, 0, 255) // 
END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
{ ; ReinforceEntry(ChapterID)
Reinforce(0xF0, 1, ReinforcementUnits, 7, 4) // Top 
Reinforce(0xF1, 1, ReinforcementUnits, 6, 3) // Middle 
Reinforce(0xF2, 1, ReinforcementUnits, 3, 3) // Bottom 
}

CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CharacterEventBothWays(0,MistyEvent, 0, GymLeader)
AllTrainersPostBattleTalk
END_MAIN

MistyEvent: 
TEXTSTART 
TEXTSHOW MistyRoute1Text
TEXTEND 
CHECK_EVENTID GirlProtagFlag
BNE 99 sC s0 
TEXTCONT 
TEXTEND 
LABEL 99 
REMA 
ENUT MistyRoute1Flag 
NoFade 
ENDA 

LocationBasedEvents:
/*
Vendor(ShopItems,2,7)
Armory(ArmoryItems,10,26)
Village(0x8,VillageEvent,18,27)
House(0,HouseEvent,6,24)
Seize(10,2)
*/
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
AFEV 0 Restore_Options 0
AREA 0 ToViridian [10,0] [13,0] 
AREA 0 ToPallet [12,39] [13,39] 
//AFEV 0 RefreshIfNotInDanger 0 
END_MAIN

#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(11,0) 
EscapeTileEntry(12,0) 
EscapeTileEntry(12,39) 
EscapeTileEntry(13,39) 
EscapeTileTerminator ; } 
#endif 

ToPallet:
ChapterTransition(PalletCh, 12, 1)

ToViridian:
ENUT Route1Tutorial_A
ChapterTransition(ViridianCh, 19, 35)


TutMsg1: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0 
ENUF DisableTutFlag_A
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(2, 21, 21, 30) 
BEQ 99 sC s0 
ENUT DisableTutFlag_A
EVBIT_MODIFY 4
PauseFreeMovement
STAL 5
CAM1 [13,23]
CUMO [13,23]
STAL 30
CURE  
TutText(TrainerTip_Quicksave)
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 

TutMsg2: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0
ENUF DisableTutFlag_B 
SVAL s1 ((ChapterID*2+1)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(2, 6, 21, 14) 
BEQ 99 sC s0 
ENUT DisableTutFlag_B
EVBIT_MODIFY 4
PauseFreeMovement
STAL 5
CAM1 [20,8]
CUMO [20,8]
STAL 30
CURE  
TutText(TrainerTip_Berries) 
SVAL s1 ((ChapterID*2+1)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 


// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
CoinsTrap(8,19,ChapterID*2,250)
CoinsTrap(20,35,(ChapterID*2)+1,250)

CutBush(4,27)
//RockSmash(3,2)
//StrengthBoulder(4,3)

RedPokeballTrap(18,25, ChapterID*2, SuperRepel, 3) // 3 uses 
StatAccessoryTrap(14,13, (ChapterID*2)+1, MuscleBand_BoostIndex) 
SkillAccessoryTrap(3,27, (ChapterID*2), VantagePlusID) 

SignBTrap(14,2, ChapterID, 0x0) //no extra text 
SignATrap(13,34, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 

//SkillScrollTrap(15,21, ChapterID*2, 0xB7)
//SpellScrollTrap(17,21, (ChapterID*2)+1, 0xB7)
//OpenPokeball(8,3)
TutSign(13,23, ChapterID*2, TrainerTip_Quicksave)
TutSign(20, 8, ChapterID*2+1, TrainerTip_Berries)
// Sign2Trap // Metal 
//Save(10,4)


//SaveCost(12,17) 


BerryTree(20,2,5)
BerryTree(16,15,5)

HealTile(12,24,25) // 25% heal 
BerryTree(15,25,5)
BerryTree(8,33,5)


Flower(19,2)
Flower(21,2)
Flower(3,6)
Flower(5,6)
Flower(7,6)
Flower(2,7)
Flower(4,7)
Flower(6,7)
Flower(3,8)
Flower(5,8)
Flower(7,8)
Flower(2,9)
Flower(4,9)
Flower(6,9)
Flower(3,11)
Flower(2,12)
Flower(3,13)
Flower(19,18)
Flower(21,18)
Flower(18,19)
Flower(20,19)
//Flower(3,27)
Flower(5,27)
//Flower(2,28)
Flower(4,28)
Flower(6,34)
Flower(10,34)
Flower(7,35)
Flower(9,35)
Flower(20,34)
Flower(21,35)
ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 
 
LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(10,6,21,10)) //top patch 

LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(16,13,21,17)) //upper mid 
LOAD1 0x1 EnemyUnitsC
ENUN

RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(12,24,17,28)) //lower mid 
LOAD1 0x1 EnemyUnitsD
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(2,33,21,34))  //bottom bush - prev 37y 
LOAD1 0x1 EnemyUnitsE
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(2,32,9,35))  //bottom w
LOAD1 0x1 EnemyUnitsF
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(20,32,21,35))  //bottom e - prev 18x 

CHECK_EVENTID BonusUnitObtainedFlag
BNE 0 sC s0 // if on, skip tutorial 
CHECK_EVENTID  RandomizeClassesFlag
BNE 0 sC s0 // if on, skip tutorial 
CHECK_EXISTS 0x102 
BNE 0 sC s0 // If more than 1 unit, don't do the tutorial & don't load the extra mankey. 
CHECK_EVENTID Route1Tutorial_A
BNE 0 sC s0
LOAD1 0x1 EnemyUnitsG // Mankey to catch 
ENUN
LABEL 0 

AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds & Bushes 

LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 

CHECK_EVENTID BoulderbadgeObtained 
BNE 27 sC s0 
CHECK_EVENTID MistyRoute1Flag 
BNE 27 sC s0 
LOAD1 1 GymLeaderUnitGroup 
ENUN 
MarkTrainerAsDefeated(GymLeader) 
LABEL 27 



CALL SetBushHpEvent

CHECK_EVENTID BonusUnitObtainedFlag
BNE 0x63 sC s0 // if on, skip tutorial 
CHECK_EVENTID  RandomizeClassesFlag
BNE 0x63 sC s0 // if on, skip tutorial 
CHECK_EXISTS 0x102 
BNE 0x63 sC s0 // If more than 1 unit, don't do the tutorial.
CHECK_EVENTID Route1Tutorial_A
BNE 0x63 sC s0
EVBIT_MODIFY 4
ShowMap
SVAL r7 1 
TutText(SkipTutorialText) 
BNE 10 rC r7
GOTO 0x63 
LABEL 10 
DisableFreeMovement
ENUT 1
EnqueneTutorialEvent_6_PlayerPhaseStart(MyTutorial1)

LABEL 0x63


NoFade
ENDA

/*

Trainer - range display. 
Enemy - Press Select to toggle display. 
Capture Pokemon tutorial 



*/


#define AttackOption 1
#define StaffOption 2
#define WaitOption 4
#define RescueOption 8
#define DropOption 0x10 
#define VisitOption 0x20 
#define TalkOption 0x40 
#define ItemOption 0x80 
#define DiscardOption 0x100 
#define TradeOption 0x200 
#define SupplyOption 0x400 
#define SupportOption 0x800 
#define ArmoryOption 0x1000 
#define OptionsOption 0x2000 
#define EndOption 0x4000 
#define UnkOption 0x8000 

#define A_Key 1
#define B_Key 2
#define Select_Key 4
#define Start_Key 8
#define Right_Key 0x10 
#define Left_Key 0x20 
#define Up_Key 0x40 
#define Down_Key 0x80 
#define R_Key 0x100 
#define L_Key 0x200 

// DisableMenuOptionsRam bitflags 
#define Attack_Off 1
#define Capture_Off 2
#define Guard_Off 4
#define Call_Off 8
#define Submenu_Off 0x10 
#define Supply_Off 0x20 
#define AoE_Off 0x1 // maybe 0x40 later  

ALIGN 4
MyTutorial1:
CHECK_EXISTS 0x102 
BNE 63 sC s0 // If more than 1 unit, don't do the tutorial. 
ENUT PlayableCutsceneFlag
SetUnitStatus(GenericA+1, LuckStat, 2)
DISABLEOPTIONS EndOption 
SCOORD sB [17,32] // adjacent
CAMERA_SB // show Mankey 
CURSOR_FLASHING_SB
STAL 15
TutText_B(CatchPokemonTutorial_1)
STAL 15
CHECK_COORDS 0 // Party Leader  
SADD sB sC s0 
SET_CURSOR_SB
EnqueneTutorialEvent_2_OnSelect(MyTutorial2)
LABEL 63 
SVAL 0xC 0x1
NoFade 
ENDA

// $D793F is read in a mem copy and saved at 3007D9C
// Menu_CallDefined proc is read but has invalid address to jump to 
// 4EF38 / 69 
//PUSH 
//ORG $D793F // Table of options to ignore 
//BYTE $4E // GaidenMagic menu option  
//POP 



MyTutorial2:
SetUnitStatus(GenericA+1, LuckStat, 10)
SHOW_MOVERANGE 0x7FFF
// Wild Mankey at 13, 35
SCOORD sB [14,35] // adjacent
CURSOR_FLASHING_SB
SCOORD sB [14,35] // adjacent
CURSOR_FLASHING_SB
STAL 25
DISABLEOPTIONS 0xFFFF // Disables all vanilla options, leaving only Guard and Capture. 
IGNORE_KEYS B_Key|Start_Key|R_Key|L_Key
Write_Byte(Attack_Off|Capture_Off|Call_Off|Submenu_Off|Supply_Off, DisableMenuOptionsRam) 
CURE
CHECK_COORDS 0x7FFF 
SADD sB sC s0 
ASMC ModularSummon_CenterCameraASMC // this one centers the camera 
EnqueneTutorialEvent_3_PreMove(MyTutorial3)
SVAL 0xC 0x1
NoFade 
ENDA


ALIGN 4
MyTutorial3:	// Move to Target postion
EVBIT_T 0x7
SVAL 0xD 0x0 // empty queue 

CHECK_CURSOR
SCOORD sB [14,35] // adjacent
BNE 1 sC sB 
LABEL 0
CURE
ASMC 0x1D7E9	// Skip selecting tile twice 
EnqueneTutorialEvent_4_PostMove(MyTutorial4)
SVAL 0xC 0x1
GOTO 63

LABEL 0x1	// if Not move to target
SET_CURSOR_SB
ASMC ModularSummon_CenterCameraASMC // this one centers the camera 
//CAMERA_SB
CURSOR_FLASHING_SB
SCOORD sB [14,35] // adjacent
CURSOR_FLASHING_SB
STAL_SKIP_FAST 8
TutText_B(CatchPokemonTutorial_2)
// TutText_B 
CURE
EnqueneTutorialEvent_3_PreMove(MyTutorial3) // Repeat if failed to move as told 
SVAL 0xC 0x0
LABEL 63
NoFade 
ENDA

MyTutorial4:
TutText_B(CatchPokemonTutorial_3)
EnqueneTutorialEvent_0_PhaseSwitch(MyTutorial5)
NoFade 
ENDA




MyTutorial5:
CALL MyTutorial_Cleanup // If they don't select the unit right away, they need to be able to press B 
TutText_B(CatchPokemonTutorial_4)
DISABLEOPTIONS EndOption 
EnqueneTutorialEvent_6_PlayerPhaseStart(MyTutorial6)
SVAL 0xC 0x1
NoFade 
ENDA

MyTutorial6:
SetUnitStatus(GenericA+1, CurrentHP, 3)
SetUnitStatus(GenericA+1, LuckStat, 2)
TutText_B(CatchPokemonTutorial_5)
CHECK_COORDS 0 // Party Leader  
SADD sB sC s0 
SET_CURSOR_SB
EnqueneTutorialEvent_2_OnSelect(MyTutorial7)
SVAL 0xC 0x1
NoFade 
ENDA

MyTutorial7:
SHOW_MOVERANGE 0x7FFF
CURSOR_FLASHING [14,35] // adjacent
CURSOR_FLASHING [16,35] // adjacent
CURSOR_FLASHING [15,34] // adjacent
STAL 20
// Wild Mankey at 13, 35
//STAL 15
DISABLEOPTIONS 0xFFFF // Disables all vanilla options, leaving only Guard and Capture. 
IGNORE_KEYS B_Key|Start_Key|R_Key|L_Key

Write_Byte(Attack_Off|Guard_Off|Call_Off|Submenu_Off|Supply_Off, DisableMenuOptionsRam) 
//WORD 0x30B41 MyTutorial2 | 0x8000000	// 0x3 = Pre Move
EnqueneTutorialEvent_3_PreMove(MyTutorial8)
SVAL 0xC 0x1
NoFade 
ENDA

MyTutorial8:
SVAL 0xD 0x0 // empty queue 
CHECK_CURSOR
SCOORD sB [14,35] // adjacent
BEQ 0x0 0xC 0xB
SCOORD sB [16,35] // adjacent
BEQ 0x0 0xC 0xB
SCOORD sB [15,34] // adjacent
BNE 1 sC sB 
LABEL 0
ASMC 0x1D7E9	// Skip selecting tile twice 
HIDE_ATTACK_RANGE
//SHOW_ATTACK_RANGE 0x7fff
// HIDE_ATTACK_RANGE 
EnqueneTutorialEvent_5_BattleForecast(MyTutorial9)
SVAL 0xC 0x1
GOTO 63

LABEL 0x1	// if Not move to target
SET_CURSOR_SB
ASMC ModularSummon_CenterCameraASMC // this one centers the camera 
//CAMERA_SB
CURSOR_FLASHING_SB
SCOORD sB [16,35] // adjacent
CURSOR_FLASHING_SB
SCOORD sB [14,35] // adjacent
CURSOR_FLASHING_SB
STAL_SKIP_FAST 8
TutText_B(CatchPokemonTutorial_2)
// TutText_B 
CURE
EnqueneTutorialEvent_3_PreMove(MyTutorial8) // Repeat if failed to move as told 
SVAL 0xC 0x0
LABEL 63
NoFade 
ENDA

MyTutorial9:
TutText_B(CatchPokemonTutorial_6)
ENUF PlayableCutsceneFlag
ENUT Route1Tutorial_A
//EnqueneTutorialEvent_0_PhaseSwitch(MyTutorial_EndA)
//EnqueneTutorialEvent_2_OnSelect(MyTutorial_EndB) // I am guessing neither of these work because an event is called when capturing a pokemon
SVAL 0xC 0x1
NoFade 
ENDA

Restore_Options: // AFEV - if not cutscene, restore options after acting. 
PlayerInRange
CHECK_EVENTID PlayableCutsceneFlag
BNE 0 sC s0
CALL MyTutorial_Cleanup
LABEL 0
NoFade 
ENDA 

MyTutorial_EndA:
//TutText_B(CatchPokemonTutorial_7)
CALL MyTutorial_Cleanup
NoFade
ENDA 



MyTutorial_Cleanup:
DISABLEOPTIONS 0 // Re-enable options 
IGNORE_KEYS 0
Write_Byte(0, DisableMenuOptionsRam) 
NoFade 
ENDA

Tutorial:
POIN MyTutorial1 MyTutorial2 MyTutorial3 MyTutorial4 MyTutorial5 MyTutorial6 MyTutorial7 MyTutorial8 MyTutorial9 MyTutorial_Cleanup
WORD 0
END_MAIN


ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN

Traps2:
ENDTRAP
ALIGN 4





Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 


GymLeaderUnitGroup:
UNIT GymLeader MistyID 0x0 Level(LVFACELEFT, Enemy, 1)   [5,3] 0	0x0 0x01 REDA5R3 [0x0,0x0,0x0,0x0] DoNothing
UNIT OaksAide policemanID 0x0 Level(LVFACERIGHT, Enemy, 1)   [4,3] 0	0x0 0x01 REDA4R3 [0x0,0x0,0x0,0x0] DoNothing
UNIT 

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b 0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,1] 001b	0x0 0x01 REDA0R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,2] 001b	0x0 0x01 REDA0R2 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 

EnemyUnitsB:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,3] 001b	0x0 0x01 REDA0R3 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF0 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT

EnemyUnitsC:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,4] 001b	0x0 0x01 REDA0R4 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF1 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsD:
UNIT 0xF2 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI 
UNIT

EnemyUnitsE:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

EnemyUnitsF:
UNIT GenericA PidgeyID 0x0 Level(0, Enemy, 1)   [1,0] 0b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

EnemyUnitsG:
UNIT GenericA+1 MankeyID 0x0 Level(0, Enemy, 1)   [17,32] 0b	0x0 0x01 REDA17R32 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 


// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersA) 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersB) 
MS_TableTerminator ; } 





{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
BQ(0, R1_0xE0_BQ) // 0xE0 
BQ(1, R1_0xE1_BQ) // 0xE1
TBQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
BD(0, R1_0xE0_BD, 300) 
BD(1, R1_0xE1_BD, 450) 
TDQ_TableTerminator ; }


HumanTrainers:
UNIT 0xE0 boyID 0x0 Level(0, Enemy, 1) [7,27]  0b 0x0	0x1 REDA7R27 [FiveRangeWep,0x0,0x0,0x0] TrainerBossAI
UNIT 0xE1 bug_catcherID 0x0 Level(0, Enemy, 1) [12,17]  0b 0x0	0x1 REDA12R17 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 


EnemyTrainersA:
UNIT GenericB 	RattataID 0xE0 	Level(0, Enemy, 1) [10,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT

EnemyTrainersB:
UNIT GenericB 	WeedleID 0xE1 	Level(0, Enemy, 1) [9,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	CaterpieID 0xE1 	Level(0, Enemy, 1) [11,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT



	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID