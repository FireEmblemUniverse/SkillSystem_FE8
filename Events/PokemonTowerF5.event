#define ChapterID PokemonTowerF5Ch
#define GenericA UnitPokeTowerWild
#define GenericB UnitPokeTowerTrainer
#define ClassA ClassPokeTowerWildA
#define ClassB ClassPokeTowerWildB
#define WildLvl 22
#define TrainerL 26




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
//{ ; ReinforceEntry(ChapterID)
//Reinforce(0xF0, 1, ReinforcementUnits, 2, 4) 
//Reinforce(0xF1, 1, ReinforcementUnits, 3, 4) 
//}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CHAR PokefluteFlag MrFujievent [0x0, 0xE2] 0 // NPC
//TrainerPostBattleTalk(0xE2) // NPC talk again 
AllTrainersPostBattleTalk
END_MAIN

MrFujievent:
Text(MrFujiText)
EVBIT_MODIFY 4 
TutText(ObtainedPokefluteText)
Text(MrFujiText2)
NoFade 
ENDA 

LocationBasedEvents:
House(0, ToPokeTowerF4, 9,16) 
//House(0, ToLavender, 18,9) 
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(9,16) 
EscapeTileTerminator ; } 
#endif 

ToPokeTowerF4:
CHECK_EVENTID PokefluteFlag
BEQ 10 sC s0 // No fast escape the tower until talked to Mr. Fuji 
CALL ExitTowerEvent
BNE 10 sC s7 
ForcedChapterTransition(LavenderCh, 18,36)
LABEL 10
ChapterTransition(PokemonTowerF4Ch, 10,17)

ToLavender:
ChapterTransition(LavenderCh, 18,36)




// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(29,18,ChapterID*2,450)
//CoinsTrap(57,15,(ChapterID*2)+1,600)


//Save(15,5) 


//RockSmash(3,2)
//StrengthBoulder(4,3)

//RedPokeballTrap(28,12, ChapterID*2, SuperPotion)
//RedPokeballTrap(7,15, ChapterID*2, SuperPotion)

//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
//SkillAccessoryTrap(17,15, ChapterID*2, RockyHelmetSkillID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)

//SkillScrollTrap(27,2, (ChapterID*2)+1, ChivalryID) 

//SignBTrap(16,22, ChapterID, 0x0) //no extra text 
//SignATrap(28,2, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 



//BerryTree(2,28,5)

//SkillScrollTrap(42,16, ChapterID*2, PatienceID)
//SpellScrollTrap(18,9, (ChapterID*2)+1, DoubleHit)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 




ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 


/*
LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(2,2,30,12)) //grass patch 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(5,12,30,23)) //grass patch 

LOAD1 0x1 EnemyUnitsC // Burrows
ENUN

AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Bushes  
*/
CheckTrainerFlag(0xE0)
BNE 10 sC s0 
CheckTrainerFlag(0xE1)
BNE 10 sC s0 
LOAD1 0x1 HumanTrainers
ENUN 
//ENUT PlayableCutsceneFlag
LABEL 10 

AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
//CALL SetBushHpEvent
LOAD1 1 MrFujiUnit
ENUN 
MarkTrainerAsDefeated(0xE2)

LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

/*
// Wilds - SpearowID	BellsproutID

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI

UNIT 

EnemyUnitsB:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI

UNIT 

EnemyUnitsC:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT 0xF0 BurrowID 0x0 Level(0, Enemy, 1)   [9,4]  0b	0x0 0x01 REDA9R4  [0x0,0x0,0x0,0x0] BushAI
UNIT 0xF1 BurrowID 0x0 Level(0, Enemy, 1)   [17,20]  0b	0x0 0x01 REDA17R20  [0x0,0x0,0x0,0x0] BushAI
UNIT 


ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 
*/


{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, RocketUnitsA) // James 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, RocketUnitsB) // Jessie 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT PTF5_0xE0_BQ // 0xE0 
SHORT PTF5_0xE1_BQ // 0xE0 
SHORT NoCascadeBadgeText // 0xE0 
TDQ_TableTerminator; 

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT PTF5_0xE0_BD // 0xE0 
SHORT 2000 // Gold 
SHORT PTF5_0xE1_BD // 0xE0 
SHORT 2000 // Gold 
SHORT MrFujiText3 // 0xE0 
SHORT 2000 // Gold 
TDQ_TableTerminator ; }

HumanTrainers:
UNIT 0xE0 rocket_mID 0x0 Level(LVFACERIGHT, Enemy, 1) [8,7]  0b 0x0	0x1 REDA8R7 [FiveRangeWep,0x0,0x0,0x0] TrainerAI  
UNIT 0xE1 rocket_fID 0x0 Level(LVFACELEFT, Enemy, 1) [12,7]  0b 0x0	0x1 REDA12R7 [FiveRangeWep,0x0,0x0,0x0] TrainerAI  
UNIT 

MrFujiUnit:
UNIT 0xE2 mrfujiID 0x0 Level(LVFACEUP, Enemy, 1) [10,4]  0b 0x0	0x1 REDA10R4 [0x0,0x0,0x0,0x0] DoNothing
UNIT 


RocketUnitsA: // James 
//UNIT GenericB	ZubatID 0xE0 Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
//UNIT GenericB 	NidoranMID 0xE0 Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	RaticateID 0xE0 Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	WeezingID 0xE0 	Level(0, Enemy, 1)   [11,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT
RocketUnitsB: // Jessie 
UNIT GenericB	MeowthID 0xE1 Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
//UNIT GenericB 	ZubatID 0xE1 Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
//UNIT GenericB 	NidoranFID 0xE1 Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	ArbokID 0xE1 	Level(0, Enemy, 1)   [11,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT


// geodude, machop, zubat, graveller
// (cubone), magnemite, voltorb

/*
EnemyTrainers0: // north hiker
UNIT GenericB 	GeodudeID 		0xE0 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	GeodudeID 		0xE0 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	GravellerID 		0xE0 	Level(0, Enemy, 1) [9,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT
EnemyTrainers1: // south hiker
UNIT GenericB 	MachopID 		0xE1 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	GeodudeID 		0xE1 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	MachopID 		0xE1 	Level(0, Enemy, 1) [9,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	GeodudeID 		0xE1 	Level(0, Enemy, 1) [11, 9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT
EnemyTrainers2: // north nerd 
UNIT GenericB 	MagnemiteID		0xE2 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	ZubatID 		0xE2 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	VoltorbID 	0xE2 	Level(0, Enemy, 1) [9,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	ZubatID 		0xE2 	Level(0, Enemy, 1) [11, 9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT
EnemyTrainers3: // south nerd 
UNIT GenericB 	VoltorbID 		0xE3 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	PikachuID 		0xE3 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	VoltorbID 		0xE3 	Level(0, Enemy, 1) [9,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	VoltorbID 			0xE3 	Level(0, Enemy, 1) [11, 9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT
*/




	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID