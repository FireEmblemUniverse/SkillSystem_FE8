#define ChapterID Route14Ch
#define GenericA UnitRoute14Wild
#define GenericB UnitRoute14Trainer
#define ClassA ClassRoute14WildA
#define ClassB ClassRoute14WildB
#define WildLvl 24
#define TrainerL 28




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
{ ; ReinforceEntry(ChapterID)
Reinforce(0xF0, 1, ReinforcementUnits, 3, 4) 
Reinforce(0xF1, 1, ReinforcementUnits, 5, 4) 
}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CHAR 0 CallRevivePartyCostEvent [0x0, 0xE4] 0 // NPC
CHAR 0 ErikaEvent [0x0, GymLeader] 0 
AllTrainersPostBattleTalk
END_MAIN
CallRevivePartyCostEvent:
SVAL s2 Route14NurseJoyText
SVAL s3 2000 // amount it costs 
CALL RevivePartyCostEvent
NoFade 
ENDA 

ErikaEvent: 
EVBIT_MODIFY 4 
Text(ErikaRoute14Text)
ENUT ErikaRoute14Flag 
GiveItemWithDurability_Rand(0, LeafStone, 1)
FADI 8 
DISA GymLeader 
FADU 8
NoFade 
ENDA  

LocationBasedEvents:
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToRoute13N [23,5] [23,5]
AREA 0 ToRoute13MN [23,7] [23,7]
AREA 0 ToRoute13MS [23,9] [23,9]
AREA 0 ToRoute13S [23,11] [23,11]
AREA 0 ToRoute15N [0,47] [0,48] 
AREA 0 ToRoute15N [0,50] [0,54] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(0,48) 
EscapeTileEntry(0,51) 
EscapeTileEntry(0,53)
EscapeTileEntry(23,5)
EscapeTileEntry(23,7)
EscapeTileEntry(23,9)
EscapeTileEntry(23,11)
EscapeTileTerminator ; } 
#endif 


ToRoute13N:
ChapterTransition(Route13Ch, 0,5)
ToRoute13MN:
ChapterTransition(Route13Ch, 0,7)
ToRoute13MS:
ChapterTransition(Route13Ch, 0,9)
ToRoute13S:
ChapterTransition(Route13Ch, 0,11)

ToRoute15N:
ChapterTransition(Route15Ch, 59,6)
ToRoute15S:
ChapterTransition(Route15Ch, 59,13)




// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(29,18,ChapterID*2,450)
//CoinsTrap(57,15,(ChapterID*2)+1,600)


//CutBush(12,10)
//RockSmash(29,9)

//StrengthBoulder(4,3)


//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
// RedPokeballTrap(8,21, (ChapterID*2)+1, LeafStone) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
//SkillAccessoryTrap(37,14, ChapterID*2, DeathBlowID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)

//SkillScrollTrap(27,2, (ChapterID*2)+1, ChivalryID) 

SignBTrap(2,49, ChapterID, 0x0) //no extra text 
SignATrap(18,10, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 



BerryTree(7,30,5)
BerryTree(8,33,5)
BerryTree(7,36,5)
BerryTree(8,39,5)
BerryTree(7,42,5)

//SkillScrollTrap(42,16, ChapterID*2, PatienceID)
SpellScrollTrap(19,8, (ChapterID*2)+1, LeafBlade)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
SaveCost(11,15) // by flowers  

Flower(15,5)
Flower(13,5)
Flower(11,5)

Flower(10,13)
Flower(8,13)
Flower(7,14)
Flower(9,14)
Flower(8,15)

Flower(19,39)
Flower(19,41)
Flower(19,43)
Flower(19,45)
Flower(18,40)
Flower(18,42)
Flower(18,44)

Flower(10,49)
Flower(8,49)
Flower(6,49)
Flower(4,49)
Flower(9,50)
Flower(7,50)
Flower(5,50)


ENDTRAP
ALIGN 4




BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 



LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(7,19,11,24)) //N patch 

AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Bushes  
LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
CALL SetBushHpEvent
MarkTrainerAsDefeated(0xE4) 


CHECK_EVENTID RainbowbadgeObtained
BNE 27 sC s0 
CHECK_EVENTID ErikaRoute14Flag
BNE 27 sC s0 
LOAD1 1 GymLeaderUnitGroup
ENUN 
MarkTrainerAsDefeated(GymLeader) 
DISA GenericA
LABEL 27 

LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

GymLeaderUnitGroup:
UNIT GymLeader ErikaID 0x0 Level(LVFACEUP, Enemy, 1) [9,23]  0b 0x0	0x1 REDA9R23 [0x0,0x0,0x0,0x0] DoNothing
UNIT

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF0 BushID 0x0 Level(0, Enemy, 1)   [0,3]  0b	0x0 0x01 REDA0R3  [0x0,0x0,0x0,0x0] BushAI
UNIT 0xF1 BushID 0x0 Level(0, Enemy, 1)   [0,4]  0b	0x0 0x01 REDA0R4  [0x0,0x0,0x0,0x0] BushAI
UNIT 



ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 

 


// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers0) 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers1) 
MS_TableEntry(0xE2, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers2) 
MS_TableEntry(0xE3, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers3) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT R14_0xE0_BQ // 0xE0 
SHORT R14_0xE1_BQ // 0xE0 
SHORT R14_0xE2_BQ // 0xE0 
SHORT R14_0xE3_BQ // 0xE0 
SHORT R14_0xE3_BQ // 0xE0 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT R14_0xE0_BD // 0xE0 
SHORT 600 // Gold 
SHORT R14_0xE1_BD // 0xE0 
SHORT 600 // Gold 
SHORT R14_0xE2_BD // 0xE0 
SHORT 600 // Gold 
SHORT R14_0xE3_BD // 0xE0 
SHORT 600 // Gold 
SHORT R14_0xE3_BD // 0xE0 
SHORT 600 // Gold 
TDQ_TableTerminator ; }

// all trainers with the same sprite will face the same direction! 
HumanTrainers:
//UNIT 0xE0 picnickerID 0x0 Level(0, Enemy, 1) [15,11]  0b 0x0	0x0 0x0  [FiveRangeWep,0x0,0x0,0x0] TrainerBossAI
UNIT 0xE1 cooltrainer_fID 0x0 Level(0, Enemy, 1) [18,32]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE2 policemanID 0x0 Level(0, Enemy, 1) [13,47]  0b 0x0	0x0 0x0  [OneRangeWep,0x0,0x0,0x0] TrainerAI
//UNIT 0xE3 cooltrainer_fID 0x0 Level(0, Enemy, 1) [11,39]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE4 ReceptionistID 0x0 Level(0, Enemy, 1)   [9,13] 0	0x0 0x01 REDA9R13 [0x0,0x0,0x0,0x0] DoNothingAI
UNIT

// Pidgeotto, Gloom, Weepinbell (route 13) 
// trainer exclusive: Growlithe, Eevee, Sandslash, 

EnemyTrainers0: // picnicker
UNIT GenericB 	GloomID 0xE0 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	WeepinbellID 0xE0 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	PidgeottoID 0xE0 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
//UNIT GenericB 	GloomID 0xE0 	Level(0, Enemy, 1) [9,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
//UNIT GenericB 	WeepinbellID 0xE0 	Level(0, Enemy, 1) [10,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT

EnemyTrainers1: // cooltrainer 
UNIT GenericB 	SandslashID 	0xE1 		Level(0, Enemy, 1) [9,11]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	WeepinbellID 		0xE1 		Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
//UNIT GenericB 	SandslashID 	0xE1 		Level(0, Enemy, 1) [9,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	GloomID 		0xE1 		Level(0, Enemy, 1) [11,9]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT

EnemyTrainers2: // officer 
UNIT GenericB 	GrowlitheID 		0xE2 		Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	EeveeID 		0xE2 		Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	GrowlitheID 		0xE2 		Level(0, Enemy, 1) [9,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT

EnemyTrainers3: // cooltrainer
UNIT GenericB 	PidgeottoID 	0xE3 		Level(0, Enemy, 1) [9,11]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	SandslashID 		0xE3 		Level(0, Enemy, 1) [11,11]   0b 0x0 0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
//UNIT GenericB 	SandslashID 		0xE3 		Level(0, Enemy, 1) [9,9]     0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	PidgeottoID 	0xE3 		Level(0, Enemy, 1) [11,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT



	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID