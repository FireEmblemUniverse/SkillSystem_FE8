#define ChapterID SaffronDojoCh

#define WildLvl 5 
#define TrainerL SaffronDojoLevel





EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
END_MAIN

CharacterBasedEvents:
AllTrainersPostBattleTalk
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
END_MAIN



LocationBasedEvents:
END_MAIN

CheckIfNoEnemiesLeft:
CHECK_ENEMIES
SVAL s1 1 
BNE 0 sC s1 
CALL EndingScene 
GOTO 99 
LABEL 0 
ENUF 0xA // so this can run again 
LABEL 99 
NoFade 
ENDA 

MiscBasedEvents:
CauseGameOverIfLordDies
//AFEV 0 GlobalAfev 0
DefeatAll(EndingScene) 
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
AFEV 0xA CheckIfNoEnemiesLeft 0
//AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToSaffron [8,19][8,19] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(8,19) 
EscapeTileTerminator ; } 
#endif 

ToSaffron:
ChapterTransition(SaffronCh, 24,6)

Traps1:
SpellScrollTrap(5,3, (ChapterID*2)+1, BulkUp) 
StatAccessoryTrap(8,3, (ChapterID*2)+1, MuscleBandT3_BoostIndex)
SpellScrollTrap(11,3, (ChapterID*2), HiJumpKick) 

RockSmash(7,12)
RockSmash(9,13)
RockSmash(10,11)
RockSmash(15,4)
RockSmash(14,7)
RockSmash(13,9)
RockSmash(15,10)
RockSmash(14,12)
RockSmash(14,15)
RockSmash(12,14)
RockSmash(11,16)
RockSmash(10,17)
RockSmash(10,8)
RockSmash(8,10)
RockSmash(6,8)
RockSmash(2,5)
RockSmash(1,8)
RockSmash(3,9)
RockSmash(4,11)
RockSmash(2,12)
RockSmash(5,13)
RockSmash(5,16)
RockSmash(4,14)
RockSmash(2,15)
RockSmash(1,14)


ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 
#ifdef INSTALL_FMU
DisableFreeMovement
#endif
ENUT TrainerBattleActiveFlag
MUSC 0x7FFF // Mute 
CAM1 [8,6] 


LOAD1 0x1 EnemyTrainersA
ENUN 
ENUT FIXED_GROWTHS_FLAG_ID
AutoLevelUnits(TrainerL, True, 0x90EF) 
ENUT FIXED_GROWTHS_FLAG_ID
AutoLevelUnits(SaffronGymBonus, False, 0x90EF) // 9 hidden levels regardless of difficulty 
//AutoLevelUnits(3, False, 0x90EF) 
CALL GenericAutolevelEvent // Trainers given invisible levels based on difficulty 

SetUnitStatusAll(0xA0DF, 0x24, 0x5, 0, AnyDeployed, AnyArmy, AnyClass, AnyRange, AnyItem)
// 0x24 is Item 4 and 0x5 is type WORD, so deleting items 4-5 and their durability 



SilentGiveItemWithDurability(0xD0, StatAccessory, MuscleBandT3_BoostIndex|0x80) // Machoke 
SilentGiveItemWithDurability(0xD0, MaxPotion,0x1)
SilentGiveItemWithDurability(0xA0, StatAccessory, MuscleBandT2_BoostIndex|0x80)
SilentGiveItemWithDurability(0xA0, SuperPotion,0x2)
SilentGiveItemWithDurability(0xA1, StatAccessory, MuscleBandT2_BoostIndex|0x80)
SilentGiveItemWithDurability(0xA1, SuperPotion,0x2)
SilentGiveItemWithDurability(0xA2, StatAccessory, MuscleBandT2_BoostIndex|0x80)
SilentGiveItemWithDurability(0xA2, SuperPotion,0x2)
SilentGiveItemWithDurability(0xA3, StatAccessory, MuscleBandT2_BoostIndex|0x80)
SilentGiveItemWithDurability(0xA3, SuperPotion,0x2)
SilentGiveItemWithDurability(0xA4, StatAccessory, MuscleBandT2_BoostIndex|0x80)
SilentGiveItemWithDurability(0xA4, SuperPotion,0x2)


MUSCFAST IntroBGM 
ShowMap
EVBIT_MODIFY 4 
Text(KoichiChallengeText)
MarkTrainerAsDefeated(0xE1)


ASMC 0x80160D1 // Return to map BGM 

//CAM1 [8,18] 



LABEL 0x63
NoFade
ENDA




EndingScene: 
#ifdef UnsetAllDangerRadius
UnsetAllDangerRadius
#endif 
UNCR(0x7FFF, 0x43) // Show SMS & Refresh 
ASMC 0x80790a5 //MU_EndAll //deselect unit
CAM1 [8,6] 
EVBIT_MODIFY 4 
Text(KoichiDefeatText)
ENUF TrainerBattleActiveFlag
SVAL r3 1000 
GIVETOMAIN 0 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 


EnemyTrainersA:
UNIT 0xE1 blackbeltID 		0x0  Level(0, Enemy, 1) [8,4]  0b 0x0	0 0	[0,0,0x0,0x0] 		DoNothingAI
UNIT 0xD0 MachokeID 		0x0  Level(0, Enemy, 1) [8,5]  0b 0x0	0 0	[Submission,DoubleEdge,0x0,0x0] 		ZoningHeal50GroupOneAI
UNIT 0xA0 HitmonleeID 		0xD0 Level(0, Enemy, 1) [6,5]  0b 0x0	0 0 [MegaKick,JumpKick,0x0,0x0] 	ZoningHeal50GroupOneAI
UNIT 0xA1 HitmonchanID 		0xD0 Level(0, Enemy, 1) [10,5]  0b 0x0	0 0	[IcePunch,ThunderPunch,FirePunch,0x0] 		ZoningHeal50GroupOneAI
UNIT 0xA2 GolduckID 		0xD0 Level(0, Enemy, 1) [5,7]  0b 0x0 0 0	[BodySlam, Surf,Psybeam,0x0] 	ZoningHeal50GroupOneAI
UNIT 0xA3 PinsirID 			0xD0 Level(0, Enemy, 1) [11,7]  0b 0x0	0 0	[XScissor, Submission, 0x0 ,0x0] 		ZoningHeal50GroupOneAI
UNIT 0xA4 PrimeapeID 		0xD0 Level(0, Enemy, 1) [8,8]  0b 0x0	0 0	[KarateChop,Leer,0x0,0x0] 		ZoningHeal50GroupOneAI
UNIT


// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersA) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
BQ(1, GarySilphCoDefeatText) 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
BD(1, KoichiTalkText, 600) 
TDQ_TableTerminator ; }
	

#undef WildLvl
#undef TrainerL
#undef ChapterID